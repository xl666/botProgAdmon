version: "3.1"

intents:
  - greet
  - goodbye
  - ejemplo
  - bot_challenge
  - temario
  - if_bloque
  - hash_bang
  - if_linea
  - encadenamiento
  - codigos_retorno
  - for
  - while
  - redireccion_flujo
  - variables
  - bloques
  - quoting
  - comandos_testing

responses:
  utter_greet:
  - text: "Hola qué tal"
  - text: "Hola"
  - text: "Buen día"
  - text: "Buenas"


  utter_goodbye:
  - text: "Bye"
  - text: "Adios"
  - text: "Nos vemos"
  - text: "Cuídate"
  - text: "Hasta la próxima"
  - text: "Ciao"

  utter_iamabot:
  - text: "Soy un bot, pero también tengo sentimientos"
  - text: "No soy humano, soy un bot"

  utter_sin_ejemplos:
  - text: "No tengo ejemplos para este tema, pide a tu maestro que agregue"
       
  utter_if_bloque_ayuda:
  - text: >
      - Recuerda que se puede poner cualquier comando en la condición,<br/>
        lo que importa es el código de retorno del comando

  utter_if_bloque_codigo:
  - text: "code:bash:bash/if_bloque.sh"

  utter_if_linea_ayuda:
  - text: >
      - Técnicamente no es un if, más bien una forma de encadenamiento<br />
      - El comando_condicion es cualquier comando, se evalúa código de retorno<br />
      - Si quieres saber más consulta el tema de encadenamiento

  utter_if_linea_codigo:
  - text: "code:bash:bash/if_linea.sh"    

  utter_hash_bang_ayuda:
  - text: >
      - Este comentario debe ir en la primera línea del script<br />
      - No debe haber espacios antes de ponerlo<br />
      - Le indica al sistema el intérprete que se desea usar<br />
      - Sirve para cualquier lenguaje interpretado, no sólo bash

  utter_hash_bang_codigo:
  - text: "code:bash:bash/hash_bang.sh"

  utter_encadenamiento_ayuda:
  - text: >
      - Sirve para ejecutar varios comandos seguidos<br />
      - Con ; siempre se ejecutan todos<br />
      - con && y || se ejecutan de acuerdo a valor de verdad

  utter_encadenamiento_complemento:
  - text: "Si quieres saber más revisa el tema de códigos de retorno"

  utter_encadenamiento_codigo:
  - text: "code:bash:bash/encadenamiento.sh"

  utter_encadenamiento_ejemplo_codigo:
  - text: "code:bash:bash/encadenamiento_ejemplo.sh"
    
  utter_codigos_retorno_ayuda:
  - text: >
      - Al terminar, todos los procesos le regresan un número al SO<br/>
      - Básicamente 0 es verdadero y cualquier otro número es falso

  utter_codigos_retorno_codigo:
  - text: "code:bash:bash/codigos_retorno.sh"

  utter_for_ayuda:
  - text: >
      - Se comporta como un for each (como el de python)<br />
      - Cuidado, se itera sobre una cadena<br />
      - Cada elemento en la cadena es separado por algún separador<br />
      - Por ejemplo, los espacios y saltos de línea son separadores<br />
      - Los caracteres separadores están definidos en la variable IFS<br />
      - Si editas IFS puedes cambiar el comportamiento de for     

  utter_for_codigo:
  - text: "code:bash:bash/for.sh"

  utter_for_ejemplo_codigo:
  - text: "code:bash:bash/for_ejemplo.sh"

  utter_while_ayuda:
  - text: >
      - Básicamente igual que en cualquier lenguaje<br />
      - En la condición lo que importa es el código de retorno del comando

  utter_while_codigo:
  - text: "code:bash:bash/while.sh"

  utter_while_ejemplo_codigo:
  - text: "code:bash:bash/while_ejemplo.sh"

  utter_redireccion_flujo_ayuda:
  - text: >
      - > Redirige salida estándar<br />
      - >> Redirige salida agregando al final<br />
      - < Redirige entrada<br />
      - 2> Redirige salida de error<br />
      - 2>> Redirige salida de error agregando al final<br />
      - &> Redirige salida y salida de error<br />
      - &>> Redirige salida y salida de error al final<br />
      - | Conecta salida y entrada de dos comandos<br />
        
  utter_redireccion_flujo_ejemplo_codigo:
  - text: "code:bash:bash/redireccion_ejemplo.sh"            
  utter_variables_ayuda:
  - text: >
      - No puedes dejar espacios en la declaración<br />
      - En bash no hay tipos de datos<br />
      - Todas las variables son cadenas<br />
      - Si una variable no existe su valor es cadena vacía<br />
      - Para recuperar el valor de una variable anteponer $<br />
      - CUIDADO la doble comilla no es para crear cadenas<br />
      - Para más información revisa el tema de quoting

  utter_variables_codigo:
  - text: "code:bash:bash/variables.sh"      

  utter_bloques_ayuda:
  - text: >
      - Sirven para hacer más de una cosa, agrupando comandos<br />
      - Hay contextos donde se espera sólo un comando pero se quieren varios<br />
      - Dentro del bloque los comandos van encadenados<br />
      - Hay que tener mucho cuidado con los espacios y los ;

  utter_bloques_codigo:
  - text: "code:bash:bash/bloques.sh"

  utter_bloques_ejemplo_codigo:
  - text: "code:bash:bash/bloques_ejemplo.sh"    

  utter_quoting_ayuda:
  - text: >
      - Se refiere a poner cosas entre comillas<br />
      - Las comillas pueden ser dobles o simples<br />
      - Es una forma de lidiar con los espacios<br/> 
      - Para bash los espacios pueden significar parámetros
      - Lo que esté entre comillas, aunque tenga espacios,<br />
        se considera como una sola cosa<br/>
      - La comilla doble expande valores<br/>
      - La comilla simple no expande valores<br/>
      - Siempre pon tus variables y parámetros entre doble comilla

  utter_quoting_ejemplo_codigo:
  - text: "code:bash:bash/quoting_ejemplo.sh"

  utter_comandos_testing_ayuda1:
  - text: >
      - Son comandos para hacer evaluaciones booleanas<br />
      - Al igual que otros comandos regresan un código de retorno<br />
      - NO son parte sintáctica de un if o un while<br />
      - Son 3 comandos de este tipo: test, [], [[]]<br />
      - test y [] son el mismo comando<br />
      - [[]] hace lo mismo que test pero tiene más opciones

  utter_comandos_testing_codigo:
  - text: "code:bash:bash/comandos_testing.sh"

  utter_comandos_testing_ejemplo_codigo:
  - text: "code:bash:bash/comandos_testing_ejemplo.sh"    
      
  utter_temario:
  - text: >
      Estos son los temas con los que te puedo ayudar:<br />
       - Bloques<br />
       - Códigos de retorno (verdad y falsedad)<br />
       - Comentario especial hash bang<br />
       - Encadenamiento<br />
       - Ciclo for<br />
       - Ciclo while<br />
       - Comandos de testing<br />
       - If de bloque<br />
       - If de línea<br />
       - Quoting<br />
       - Redirección de flujo<br />
       - Variables<br />
       
       

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true
