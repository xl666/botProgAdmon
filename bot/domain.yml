version: "3.1"

intents:
  - greet
  - goodbye
  - ejemplo
  - bot_challenge
  - temario
  - if_bloque
  - hash_bang
  - if_linea
  - encadenamiento
  - codigos_retorno
  - for
  - while
  - redireccion_flujo
  - variables
  - bloques
  - quoting
  - comandos_testing
  - funciones
  - recorrer_dirs
  - funciones_rec
  - globbing
  - expansion_comando
  - parametros
  - parametros_especiales
  - expansion_variables
  - getopts
  - variables_entorno
  - arreglos
  - params_variables
  - regexps
  - cron
  - systemd
  - comandos_procesos
  - cachar_señales
  - scripts_remotos
  - expect
  - cifrado

responses:
  utter_greet:
  - text: "Hola qué tal"
  - text: "Hola"
  - text: "Buen día"
  - text: "Buenas"


  utter_goodbye:
  - text: "Bye"
  - text: "Adios"
  - text: "Nos vemos"
  - text: "Cuídate"
  - text: "Hasta la próxima"
  - text: "Ciao"

  utter_iamabot:
  - text: "Soy un bot, pero también tengo sentimientos"
  - text: "No soy humano, soy un bot"

  utter_sin_ejemplos:
  - text: "No tengo ejemplos para este tema, pide a tu maestro que agregue"
       
  utter_if_bloque_ayuda:
  - text: |
      - Recuerda que se puede poner cualquier comando en la condición,
        lo que importa es el código de retorno del comando

  utter_if_bloque_codigo:
  - text: "code:bash:bash/if_bloque.sh"

  utter_if_linea_ayuda:
  - text: |
      - Técnicamente no es un if, más bien una forma de encadenamiento
      - El comando_condicion es cualquier comando, se evalúa código de retorno
      - Si quieres saber más consulta el tema de encadenamiento

  utter_if_linea_codigo:
  - text: "code:bash:bash/if_linea.sh"    

  utter_hash_bang_ayuda:
  - text: |
      - Este comentario debe ir en la primera línea del script
      - No debe haber espacios antes de ponerlo
      - Le indica al sistema el intérprete que se desea usar
      - Sirve para cualquier lenguaje interpretado, no sólo bash

  utter_hash_bang_codigo:
  - text: "code:bash:bash/hash_bang.sh"

  utter_encadenamiento_ayuda:
  - text: |
      - Sirve para ejecutar varios comandos seguidos
      - Con ; siempre se ejecutan todos
      - con && y || se ejecutan de acuerdo a valor de verdad

  utter_encadenamiento_complemento:
  - text: "Si quieres saber más revisa el tema de códigos de retorno"

  utter_encadenamiento_codigo:
  - text: "code:bash:bash/encadenamiento.sh"

  utter_encadenamiento_ejemplo_codigo:
  - text: "code:bash:bash/encadenamiento_ejemplo.sh"
    
  utter_codigos_retorno_ayuda:
  - text: |
      - Al terminar, todos los procesos le regresan un número al SO
      - Básicamente 0 es verdadero y cualquier otro número es falso

  utter_codigos_retorno_codigo:
  - text: "code:bash:bash/codigos_retorno.sh"

  utter_for_ayuda:
  - text: |
      - Se comporta como un for each (como el de python)
      - Cuidado, se itera sobre una cadena
      - Cada elemento en la cadena es separado por algún separador
      - Por ejemplo, los espacios y saltos de línea son separadores
      - Los caracteres separadores están definidos en la variable IFS
      - Si editas IFS puedes cambiar el comportamiento de for     

  utter_for_codigo:
  - text: "code:bash:bash/for.sh"

  utter_for_ejemplo_codigo:
  - text: "code:bash:bash/for_ejemplo.sh"

  utter_while_ayuda:
  - text: |
      - Básicamente igual que en cualquier lenguaje
      - En la condición lo que importa es el código de retorno del comando

  utter_while_codigo:
  - text: "code:bash:bash/while.sh"

  utter_while_ejemplo_codigo:
  - text: "code:bash:bash/while_ejemplo.sh"

  utter_redireccion_flujo_ayuda:
  - text: |
      - > Redirige salida estándar
      - >> Redirige salida agregando al final
      - < Redirige entrada
      - 2> Redirige salida de error
      - 2>> Redirige salida de error agregando al final
      - &> Redirige salida y salida de error
      - &>> Redirige salida y salida de error al final
      - | Conecta salida y entrada de dos comandos
        
  utter_redireccion_flujo_ejemplo_codigo:
  - text: "code:bash:bash/redireccion_ejemplo.sh"            
  utter_variables_ayuda:
  - text: |
      - No puedes dejar espacios en la declaración
      - En bash no hay tipos de datos
      - Todas las variables son cadenas
      - Si una variable no existe su valor es cadena vacía
      - Para recuperar el valor de una variable anteponer $
      - CUIDADO la doble comilla no es para crear cadenas
      - Para más información revisa el tema de quoting

  utter_variables_codigo:
  - text: "code:bash:bash/variables.sh"      

  utter_bloques_ayuda:
  - text: |
      - Sirven para hacer más de una cosa, agrupando comandos
      - Hay contextos donde se espera sólo un comando pero se quieren varios
      - Dentro del bloque los comandos van encadenados
      - Hay que tener mucho cuidado con los espacios y los ;

  utter_bloques_codigo:
  - text: "code:bash:bash/bloques.sh"

  utter_bloques_ejemplo_codigo:
  - text: "code:bash:bash/bloques_ejemplo.sh"    

  utter_quoting_ayuda:
  - text: |
      - Se refiere a poner cosas entre comillas
      - Las comillas pueden ser dobles o simples
      - Es una forma de lidiar con los espacios 
      - Para bash los espacios pueden significar parámetros
      - Lo que esté entre comillas, aunque tenga espacios,
        se considera como una sola cosa
      - La comilla doble expande valores
      - La comilla simple no expande valores
      - Siempre pon tus variables y parámetros entre doble comilla

  utter_quoting_ejemplo_codigo:
  - text: "code:bash:bash/quoting_ejemplo.sh"

  utter_comandos_testing_ayuda1:
  - text: |
      - Son comandos para hacer evaluaciones booleanas
      - Al igual que otros comandos regresan un código de retorno
      - NO son parte sintáctica de un if o un while
      - Son 3 comandos de este tipo: test, [], [[]]
      - test y [] son el mismo comando
      - [[]] hace lo mismo que test pero tiene más opciones

  utter_comandos_testing_codigo:
  - text: "code:bash:bash/comandos_testing.sh"

  utter_comandos_testing_ejemplo_codigo:
  - text: "code:bash:bash/comandos_testing_ejemplo.sh"    

  utter_funciones_ayuda:
  - text: |
      - Sirven para agrupar funcionalidad y descomponer problemas
      - Los parámetros que reciben son posicionales, como en un script
      - Si quieres regresar un valor usa echo (trata de que sea uno)
      - Con return se puede regresar un código de retorno
      - Las funciones se invocan como cualquier comando
      - Siempre que declares usa local para no definir en ámbito global
  
  utter_funciones_codigo:
  - text: "code:bash:bash/funciones.sh"

  utter_funciones_ejemplo_codigo:
  - text: "code:bash:bash/funciones_ejemplo.sh"        

  utter_recorrer_dirs_ayuda:
  - text: |
      - NUNCA uses ls para recorrer lo archivos de un directorio
      - ls no funciona bien si hay espacios en los nombres de archivos
      - Para este caso se debe usar globbing
      - Es importante que el globbing quede fuera de comillas dobles
      - Si quieres saber más revisa el tema de globbing

  utter_recorrer_dirs_codigo:
  - text: "code:bash:bash/recorrer_dirs.sh"

  utter_funciones_rec_ayuda:
  - text: |
      - Son funciones que se mandan a llamar a si mismas
      - Muy útiles para hacer recorridos recursivos de directorios
      - Para usarlas hay que establecer casos base y recursivos
      - Para procesar directorios recursivamente:<ol>
      <li>Define una función no recursiva para procesar un directorio</li>
      <li>Define una función recursiva que llama a la no recursiva
      y luego busca subdirectorios, llamando recursivamente la función</li></ol>

  utter_funciones_rec_codigo:
  - text: "code:bash:bash/funciones_rec.sh"

  utter_funciones_rec_ejemplo_codigo:
  - text: "code:bash:bash/funciones_rec_ejemplo.sh"          

  utter_globbing_ayuda1:
  - text: |
      - Sirve para sustituir rutas (y sólo rutas)
      - Se expresa mediante un patrón que se expande a una o varias rutas
      - Es de mucha utilidad para recorrer directorios
      - También es de utilidad con comandos que reciben muchas rutas
      - Bash expande los patrones antes de ejecutar el comando      

  utter_globbing_ayuda2:
  - text: |
      - * Hace match con cualquier cadena de longitud 0 o más
      - ? Hace match con un solo carácter
      - [caracteres] Hace match con uno de los caracteres
      - \{\} Para especificar varios glob patterns separados por coma
      - [[:clase:]] hace match con un carácter de una clase:<ul>
      <li>digit, word, space, alnum, alpha, lower, upper, cntrl</li></ul>

  utter_globbing_ejemplo_codigo:      
  - text: "code:bash:bash/globbing_ejemplo.sh"          

  utter_expansion_comando_codigo:      
  - text: "code:bash:bash/expansion_comando.sh"

  utter_expansion_comando_ejemplo_codigo:      
  - text: "code:bash:bash/expansion_comando_ejemplo.sh"              
    
  utter_expansion_comando_ayuda:
  - text: |
      - Sirven para convertir a cadena la salida de un comando
      - Una vez que se tiene la cadena se puede usar en otro comando
      - O se puede asignar a una variable
      - Otro uso común es en un for
      - Básicamente la salida del comando se expande a una cadena

  utter_parametros_ayuda:
  - text: |
      - Sirven para recibir entradas de usuario
      - Los parámetros son variables especiales en tu script
      - Son posicionales y constantes (no se puede cambiar su valor)
      - En tu script tienes acceso a ellos mediante variables $1, $2, etc.
      - Existe una variable especial $0 que contiene la ruta del script
      - La ruta es relativa o absoluta de acuerdo a cómo se ejecutó el script

  utter_parametros_ejemplo_codigo:      
  - text: "code:bash:bash/parametros_ejemplo.sh"                
  
  utter_parametros_especiales_ayuda:
  - text: |
      - * NO usarlo, expande a una cadena con todos los parámetros
      - @ expando los parámetros como una lista de argumentos
      - # número de parámetros pasados
      - ? código de retorno del comando anterior
      - - banderas de opciones que usa el shell
      - $ PID del shell actual
      - ! PID del último proceso ejecutado en segundo plano
      - _ último argumento del comando anterior
      
  utter_parametros_especiales_ejemplo_codigo:      
  - text: "code:bash:bash/parametros_especiales_ejemplo.sh"                

  utter_expansion_variables_ayuda1:
  - text: |
      - Al expandir una variable se pueden hacer preprocesamientos
      - La sintaxis general es ${variable}
      - ${variable} es equivalente a $variable
      - Sirve también para resolver casos ambiguos de expansiones
      - Dicha sintaxis se acompaña de varios operadores especiales
      - Los operadores especiales usan los mismos patrones que el globbing
      
  utter_expansion_variables_ayuda2:
  - text: |
      - ${var#patron} remueve cadena más corta desde la izquierda
      - ${var##patron} remueve cadena más larga desde la izquierda
      - ${var%patron} remueve cadena más corta desde la derecha
      - ${var%%patron} remueve cadena más larga desde la derecha
      - ${var/patron/remplazo} remplaza la primera cadena que hace match
      - ${var//patron/remplazo} remplaza todas las cadenas que hacen match
      - ${var/#patron/remplazo} remplaza primera cadena por la izquierda
      - ${var/%patron/remplazo} remplaza primera cadena por la derecha
      - ${#var} expande a la longitud del valor en bytes
      - ${var:inicio[:longitud]} para hacer rebanadas
      - ${var[^|^^|,|,,][patron]} a mayúsculas o minúsculas parte o todo

  utter_expansion_variables_ejemplo_codigo:      
  - text: "code:bash:bash/expansion_variables_ejemplo.sh"

  utter_getopts_ayuda:
  - text: |
      - Para integrar parámetros modificadores (keyword)
      - Los modificadores no son posicionales
      - getopts es un built-in de bash, sigue POSIX
      - getopts está limitado a modificadores de una sola letra
      - Los modificadores deben ir antes de parámetros posicionales

  utter_getopts_codigo:      
  - text: "code:bash:bash/getopts.sh"

  utter_variables_entorno_ayuda:
  - text: |
      - Son variables asociadas a los procesos
      - Los procesos hijos las copian de los procesos padre
      - Se comportan como variables globales
      - CUIDADO, no son variables del sistema
      - Son útiles para establecer configuración
      - Funcionan como mecanismo de comunicación entre procesos

  utter_variables_entorno_codigo:      
  - text: "code:bash:bash/variables_entorno.sh"      
      
  utter_arreglos_ayuda:
  - text: |
      - Colección lineal de elementos
      - Usar en vez de cadenas separadas por espacios
      - Al igual que con resultados de globbing, no son precisamente cadenas
      - Las sentencias de control los pueden usar directamente
      - Útiles para procesar parámetros variables
      - NO tratar de hacer funciones que regresan arreglos
      - Las funciones sólo pueden regresar cadenas o códigos de retorno
      - Si necesitas hacer algo complejo con arreglos, ¡¡NO uses bash!!

  utter_arreglos_codigo:
  - text: "code:bash:bash/arreglos.sh"

  utter_arreglos_ejemplo_codigo:
  - text: "code:bash:bash/arreglos_ejemplo.sh"

  utter_params_variables_ayuda:
  - text: |
      - Se refiere a poder recibir cualquier número de parámetros
      - Comandos como cp, mv y rm tienen este estilo de parámetros
      - La clave es usar arreglos y la variable especial $@
      - Usualmente el último parámetro es especial
      - En la documentación de ayuda utiliza ... para señalarlos

  utter_params_variables_codigo:
  - text: "code:bash:bash/params_variables.sh"

  utter_regexps_ayuda1:
  - text: |
      - También conocidas con RegExps 
      - Sirven pare definir patrones de texto
      - Usos: filtrar, verificar cadenas, capturar subcadenas
      - Comandos como grep hacen un uso extensivo de éstas

  utter_regexps_ayuda2:
  - text: |
      - egrep es equivalente a grep -E, preferir último
      - egrep sin opciones filtra líneas que contengan patrón
      - egrep -o captura subcadenas que cumplan con el patrón
      - grep -P activa operadores regulares extendidos de Perl
      - [[ cadena =~ regexp ]] cadena cumple con regexp

  utter_regexps_codigo:
  - text: "code:bash:bash/regexps.sh"

  utter_regexps_ejemplo_codigo:
  - text: "code:bash:bash/regexps_ejemplo.sh"    

  utter_cron_ayuda:
  - text: |
      - Sirven para calendarizar tareas
      - Se requiere de algún demonio del sistema
      - Por ejemplo cronie
      - Cada usuario tiene sus propios cron jobs
      - crontab -l muestra los cronjobs del usuario
      - crontab -e permite editar el crontab del usuario

  utter_cron_codigo:
  - text: "code:bash:bash/crontab.sh"

  utter_systemd_ayuda:
  - text: |
      - systemd es un sistema de inicialización que hace muchas cosas (incluso puede remplazar a cron)
      - En este curso nos concentraremos en su capacidad para gestionar servicios
      - Puedes aprovechar esta capacidad para que tus scripts se administren como otros servicios
      - Esto es para scripts que corren continuamente (por ejemplo para monitorización)
      - Si sólo necesitas que tu script se ejecute al inicio, mejor usa un cron (con @reboot)

  utter_systemd_codigo:
  - text: "code:bash:bash/systemd.sh"

  utter_comandos_procesos_codigo:
  - text: "code:bash:bash/comandos_procesos.sh"

  utter_cachar_señales_ayuda:
  - text: |
      - Mediante el envío y cachado de señales los procesos se pueden comunicar
      - Cualquier proceso le puede enviar cualquier señal a otro proceso
      - Los procesos que reciben la señal pueden procesar de forma especial la señal
      - El procesamiento especial sólo aplica a señales atrapables
      - Sino es atrapables se aplica siempre una acción por defecto
      - Ejemplos de señales atrapables: term, int, usr1, usr2
      - Ejemplos de señales no atrapables: kill, stop, cont
      - Mediante el comando trap se pueden atrapar señales y asociarles una acción

  utter_cachar_señales_ayuda2:
  - text: |
      - Para usar correctamente el comando trap en un script bash:
          <ol>
          <li>Un script que recibe señales debe poder correr indefinidamente</li>
          <li>Usa sleep para mantener la ejecución, pero...</li>
          <li>Si bash está ejecutando una acción larga en primer plano al momento de recibir la señal, la señal no será procesada hasta terminar la acción larga</li>
          <li>Para evitar el problema anterior, ejecuta acciones largas con & seguido de el comando wait</li>
          <li>O bien usa un while de espera con sleeps cortos</li>
          <li>Considera que el registro del trap lleva un poco de tiempo en el kernel</li>
          <li>Es posible otro proceso envíe la señal antes de estar listo, ejecutándose la acción por defecto para la señal</li>
          <li>Para prevenir este problema, de ser necesario, agrega sleeps en los lugares indicados para esperar el registro del trap</li>
          </ol>

  utter_cachar_señales_codigo:
  - text: "code:bash:bash/trap.sh"

  utter_scripts_remotos_ayuda:
  - text: |
      - Se refire a poder ejecutar un script en un servidor remoto
      - En este curso se utiliza ssh para ese propósito
      - Dos opciones: el script está en el servidor remoto o está en el cliente local
      - Se debe tener cuidado con las contraseñas ya que se piden de forma interactiva
      - La ejecución de un script remoto no se puede automatizar directamente por esta razón
      - Dos opciones:
          <ol>
          <li>Configurar llaves de confianza ssh</li>
          <li>Usar alguna herramienta de inyección de entradas como expect (xargs no funciona)</li>
          </ol>


  utter_scripts_remotos_codigo:
    - text: "code:bash:bash/remoto.sh"        
      

  utter_expect_ayuda:
    - text: |
        - Sirve para automatizar programas interactivos simples
        - Osea que requieren de entrada estándar varias veces
        - Si es sólo una entrada mejor usar pipes (excepto en contraseñas)
        - expect usa un lenguaje de scripting diferente a bash
        - Pero se puede combinar fácilmente con scripts de bash
        - Es probable que no tengas expect instalado por defecto
        - Se puede usar para inyectar contraseñas de ssh
        - El uso anterior se debe complementar con cifrado de contraseñas

  utter_expect_codigo:
    - text: "code:bash:bash/expect.sh"
      
  utter_cifrado_ayuda1:
    - text: |
        - Se refiere a transformar los datos para que no sean legibles
        - Si se cifra se puede más tarde descifrar mediante una llave
        - No confundir con codificar ni con hashear
        - El cifrado es útil para datos en tránsito y en reposo
        - En este curso nos concentramos en datos en reposo
        - El cifrado puede ser simétrico (una llave) o asimétrico (dos llaves)
        - Para datos en reposo basta el cifrado simétrico

  utter_cifrado_ayuda2:
    - text: |
        - En este curso se utiliza la herramienta ccrypt
        - ccrypt es simple y tiene facilidades para scripting
        - Posiblemente esté en los repositorios de tu distro

  utter_cifrado_codigo:
    - text: "code:bash:bash/cifrado.sh"
          
      
  utter_temario:
  - text: |
      Estos son los temas con los que te puedo ayudar:
       - Arreglos
       - Atrapar señales de procesos
       - Bloques
       - Códigos de retorno (verdad y falsedad)
       - Comentario especial hash bang
       - Ciclo for
       - Ciclo while
       - Cifrado
       - Comandos de testing
       - Comandos para procesos
       - Cron
       - Encadenamiento
       - Expansión de sustitución de comando
       - Expansión de variables
       - Expect
       - Expresiones regulares
       - Funciones
       - Funciones recursivas
       - Getopts
       - Globbing
       - If de bloque
       - If de línea
       - Parámetros
       - Parámetros especiales
       - Parámetros variables
       - Quoting
       - Recorrer directorios
       - Redirección de flujo
       - Scripts remotos
       - Systemd
       - Variables
       - Variables de entorno
       
       

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true
